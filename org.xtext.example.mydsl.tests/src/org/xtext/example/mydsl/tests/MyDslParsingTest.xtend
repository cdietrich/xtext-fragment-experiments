/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import com.google.inject.Provider
import org.eclipse.xtext.resource.IResourceDescription
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.eclipse.emf.common.util.URI
import org.eclipse.xtext.util.StringInputStream
import org.eclipse.xtext.EcoreUtil2

@ExtendWith(InjectionExtension)
@InjectWith(MyDslInjectorProvider)
class MyDslParsingTest {
	@Inject
	Provider<XtextResourceSet> rsp
	
	@Inject
	IResourceDescription.Manager mgr;
	
	@Test
	def void loadModel() {
		val rs = rsp.get
		val r1 = rs.createResource(URI.createURI("a.mydsl"))
		r1.load(new StringInputStream('''
		Hello D1!
		Hello D2!
		Hello D3!
		'''), null)
		val r2 = rs.createResource(URI.createURI("b.mydsl"))
		r2.load(new StringInputStream('''
		Hello X!
		Hello Y from D1!
		Hello Y from D3!
		Hello Z from D1!
		Hello Z2 from X!
		'''), null)
		
		val result = r2.contents.get(0)
		Assertions.assertNotNull(result)
		EcoreUtil2.resolveAll(r2)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		val rd = mgr.getResourceDescription(r2)
		println(rd)
		for (rfd : rd.referenceDescriptions) {
			println(rfd.sourceEObjectUri + " -> " + rfd.targetEObjectUri)
		}
	}
}
